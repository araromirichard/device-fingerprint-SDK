{
  "version": 3,
  "sources": ["../../../functions/checkIPReputation.js"],
  "sourceRoot": "C:\\Users\\HP\\Desktop\\Mulaa\\device-fingerprint-sdk\\.wrangler\\tmp\\deploy-bU4fWr",
  "sourcesContent": ["export default {\r\n    async fetch(request, env) {\r\n        const corsHeaders = {\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n            'Access-Control-Allow-Headers': 'Content-Type, x-org-id, x-domain'\r\n        };\r\n\r\n        if (request.method === 'OPTIONS') {\r\n            return new Response(null, { headers: corsHeaders });\r\n        }\r\n              const ip = request.headers.get('cf-connecting-ip');\r\n              let ipv4Address = ip;\r\n\r\n              // Convert IPv6 to IPv4 if needed\r\n              if (ip.includes(':')) {\r\n                  // Handle IPv6 mapped IPv4 addresses\r\n                  if (ip.startsWith('::ffff:')) {\r\n                      ipv4Address = ip.split(':').pop();\r\n                  } else {\r\n                      // For other IPv6, get the last 4 segments\r\n                      ipv4Address = ip.split(':').slice(-4).join('.');\r\n                  }\r\n              }\r\n\r\n              const orgId = request.headers.get('x-org-id');\r\n              const userAgent = request.headers.get('user-agent');\r\n              const baseHeaders = {\r\n                  'Content-Type': 'application/json',\r\n                  ...corsHeaders\r\n        };\r\n\r\n        try {\r\n            // Handle POST request to update advance status\r\n            if (request.method === 'POST' && new URL(request.url).pathname === '/api/updateAdvance') {\r\n                const { advance } = await request.json();\r\n                await env.DB.prepare(\r\n                    \"UPDATE organizations SET advance = ? WHERE org_id = ?\"\r\n                ).bind(advance, orgId).run();\r\n\r\n                return new Response(JSON.stringify({ success: true }), {\r\n                    headers: baseHeaders\r\n                });\r\n            }\r\n\r\n            // Rest of your existing code...\r\n            let org = await env.DB.prepare(\r\n                \"SELECT * FROM organizations WHERE org_id = ?\"\r\n            ).bind(orgId).first();\r\n\r\n            if (!org) {\r\n                org = await env.DB.prepare(\r\n                    \"INSERT INTO organizations (org_id, usage_count, advance) VALUES (?, 1, false) RETURNING *\"\r\n                ).bind(orgId).first();\r\n            }\r\n\r\n            // Update usage count\r\n            await env.DB.prepare(\r\n                \"UPDATE organizations SET usage_count = usage_count + 1 WHERE org_id = ?\"\r\n            ).bind(orgId).run();\r\n\r\n            // Generate device fingerprint components\r\n            const deviceData = {\r\n                userAgent,\r\n                acceptLanguage: request.headers.get('accept-language'),\r\n                platform: request.headers.get('sec-ch-ua-platform'),\r\n                mobile: request.headers.get('sec-ch-ua-mobile'),\r\n                vendor: request.headers.get('sec-ch-ua-vendor'),\r\n                screen: request.headers.get('sec-ch-viewport-width'),\r\n                colorDepth: request.headers.get('sec-ch-color-depth'),\r\n                timezone: request.headers.get('sec-ch-timezone'),\r\n                languages: request.headers.get('accept-language'),\r\n                ip\r\n            };\r\n\r\n            // Generate unique fingerprint hash\r\n            const encoder = new TextEncoder();\r\n            const data = encoder.encode(JSON.stringify(deviceData));\r\n            const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n            const fingerprintHash = Array.from(new Uint8Array(hashBuffer))\r\n                .map(b => b.toString(16).padStart(2, '0'))\r\n                .join('')\r\n                .substring(0, 16);\r\n\r\n            const existingDevice = await env.DB.prepare(\r\n                \"SELECT device_hash FROM device_fingerprints WHERE org_id = ? AND device_hash = ?\"\r\n            ).bind(orgId, fingerprintHash).first();\r\n\r\n            if (!existingDevice) {\r\n                // New device - store it and increment count\r\n                await env.DB.prepare(\r\n                    \"INSERT INTO device_fingerprints (org_id, device_hash, created_at) VALUES (?, ?, ?)\"\r\n                ).bind(orgId, fingerprintHash, Date.now()).run();\r\n\r\n                await env.DB.prepare(\r\n                    \"UPDATE organizations SET usage_count = usage_count + 1 WHERE org_id = ?\"\r\n                ).bind(orgId).run();\r\n            }\r\n\r\n            let fingerprint = {\r\n                fingerprintHash,\r\n                ipAddress: ip,\r\n                isEmulator: deviceData.userAgent.toLowerCase().includes('emulator')\r\n            };\r\n\r\n            // Add IP reputation data if org has advanced access\r\n            if (org.advance) {\r\n                const IPQS_API_KEY = env.IPQS_API_KEY;\r\n                const ipData = await fetch(\r\n                    `https://www.ipqualityscore.com/api/json/ip/${IPQS_API_KEY}/${ip}`\r\n                ).then(r => r.json());\r\n\r\n                console.log(JSON.stringify(ipData, null, 2));\r\n                fingerprint = {\r\n                    ...fingerprint,\r\n                    comfirmIP: ipData.ip,\r\n                    geoLocation: {\r\n                        country_code: ipData.country_code,\r\n                        country: ipData.country,\r\n                        city: ipData.city,\r\n                    },\r\n                    isVPN: ipData.vpn,\r\n                    isTor: ipData.tor,\r\n                    isProxy: ipData.proxy,\r\n                    isBot: ipData.bot_status,\r\n                    isDatacenter: ipData.is_datacenter\r\n                };\r\n            }\r\n\r\n            return new Response(JSON.stringify({\r\n                organization: {\r\n                    orgId: org.org_id,\r\n                    usageCount: org.usage_count,\r\n                    advance: org.advance\r\n                },\r\n                fingerprint\r\n            }), {\r\n                headers: baseHeaders\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('Detailed error:', error);\r\n            return new Response(JSON.stringify({ \r\n                error: \"Failed to generate fingerprint\",\r\n                details: error.message,\r\n                stack: error.stack\r\n            }), {\r\n                status: 500,\r\n                headers: baseHeaders\r\n            });\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
